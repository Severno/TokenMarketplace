/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ITokenMarketplaceInterface extends utils.Interface {
  functions: {};

  events: {
    "AllBidsCanceled(address)": EventFragment;
    "BidCanceled(address,uint256)": EventFragment;
    "BidClosed(address)": EventFragment;
    "BidCreated(address,uint256,uint256)": EventFragment;
    "BuyToken(address,uint256,uint256)": EventFragment;
    "EndSaleRound(uint8,uint256)": EventFragment;
    "EndTradeRound(uint8,uint256)": EventFragment;
    "Registered(address,address)": EventFragment;
    "StartSaleRound(uint8,uint256)": EventFragment;
    "Trade(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllBidsCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndSaleRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndTradeRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartSaleRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
}

export type AllBidsCanceledEvent = TypedEvent<[string], { _msgSender: string }>;

export type AllBidsCanceledEventFilter = TypedEventFilter<AllBidsCanceledEvent>;

export type BidCanceledEvent = TypedEvent<
  [string, BigNumber],
  { _msgSender: string; _index: BigNumber }
>;

export type BidCanceledEventFilter = TypedEventFilter<BidCanceledEvent>;

export type BidClosedEvent = TypedEvent<[string], { _msgSender: string }>;

export type BidClosedEventFilter = TypedEventFilter<BidClosedEvent>;

export type BidCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _msgSender: string; _amount: BigNumber; _price: BigNumber }
>;

export type BidCreatedEventFilter = TypedEventFilter<BidCreatedEvent>;

export type BuyTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _msgSender: string; _amount: BigNumber; _price: BigNumber }
>;

export type BuyTokenEventFilter = TypedEventFilter<BuyTokenEvent>;

export type EndSaleRoundEvent = TypedEvent<
  [number, BigNumber],
  { _round: number; _tradeAmount: BigNumber }
>;

export type EndSaleRoundEventFilter = TypedEventFilter<EndSaleRoundEvent>;

export type EndTradeRoundEvent = TypedEvent<
  [number, BigNumber],
  { _round: number; _tradeAmount: BigNumber }
>;

export type EndTradeRoundEventFilter = TypedEventFilter<EndTradeRoundEvent>;

export type RegisteredEvent = TypedEvent<
  [string, string],
  { _msgSender: string; referral: string }
>;

export type RegisteredEventFilter = TypedEventFilter<RegisteredEvent>;

export type StartSaleRoundEvent = TypedEvent<
  [number, BigNumber],
  { _round: number; _minted: BigNumber }
>;

export type StartSaleRoundEventFilter = TypedEventFilter<StartSaleRoundEvent>;

export type TradeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { _msgSender: string; _seller: string; _amount: BigNumber; _price: BigNumber }
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface ITokenMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AllBidsCanceled(address)"(_msgSender?: null): AllBidsCanceledEventFilter;
    AllBidsCanceled(_msgSender?: null): AllBidsCanceledEventFilter;

    "BidCanceled(address,uint256)"(
      _msgSender?: null,
      _index?: null
    ): BidCanceledEventFilter;
    BidCanceled(_msgSender?: null, _index?: null): BidCanceledEventFilter;

    "BidClosed(address)"(_msgSender?: null): BidClosedEventFilter;
    BidClosed(_msgSender?: null): BidClosedEventFilter;

    "BidCreated(address,uint256,uint256)"(
      _msgSender?: null,
      _amount?: null,
      _price?: null
    ): BidCreatedEventFilter;
    BidCreated(
      _msgSender?: null,
      _amount?: null,
      _price?: null
    ): BidCreatedEventFilter;

    "BuyToken(address,uint256,uint256)"(
      _msgSender?: null,
      _amount?: null,
      _price?: null
    ): BuyTokenEventFilter;
    BuyToken(
      _msgSender?: null,
      _amount?: null,
      _price?: null
    ): BuyTokenEventFilter;

    "EndSaleRound(uint8,uint256)"(
      _round?: null,
      _tradeAmount?: null
    ): EndSaleRoundEventFilter;
    EndSaleRound(_round?: null, _tradeAmount?: null): EndSaleRoundEventFilter;

    "EndTradeRound(uint8,uint256)"(
      _round?: null,
      _tradeAmount?: null
    ): EndTradeRoundEventFilter;
    EndTradeRound(_round?: null, _tradeAmount?: null): EndTradeRoundEventFilter;

    "Registered(address,address)"(
      _msgSender?: null,
      referral?: null
    ): RegisteredEventFilter;
    Registered(_msgSender?: null, referral?: null): RegisteredEventFilter;

    "StartSaleRound(uint8,uint256)"(
      _round?: null,
      _minted?: null
    ): StartSaleRoundEventFilter;
    StartSaleRound(_round?: null, _minted?: null): StartSaleRoundEventFilter;

    "Trade(address,address,uint256,uint256)"(
      _msgSender?: null,
      _seller?: null,
      _amount?: null,
      _price?: null
    ): TradeEventFilter;
    Trade(
      _msgSender?: null,
      _seller?: null,
      _amount?: null,
      _price?: null
    ): TradeEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
