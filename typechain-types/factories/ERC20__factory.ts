/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20, ERC20Interface } from "../ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052346200019f5762000edf803803806200001d81620001bb565b9283398101604082820312620001985781516001600160401b03908181116200018f57826200004e918501620001f0565b926020928382015183811162000184576200006a9201620001f0565b91835191821162000174575b6200008e826200008860035462000296565b620002d5565b80601f8311600114620000e357508190620000c794600092620000d7575b50508160011b916000199060031b1c19161760035562000387565b604051610a5390816200048c8239f35b015190503880620000ac565b60036000529193601f1985167fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b936000905b8282106200015b575050916001939186620000c797941062000141575b505050811b0160035562000387565b015160001960f88460031b161c1916905538808062000132565b8060018697829497870151815501960194019062000115565b6200017e620001a4565b62000076565b505050505050600080fd5b50505050600080fd5b5050600080fd5b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b03811183821017620001e157604052565b620001eb620001a4565b604052565b81601f820112156200028e578051906001600160401b0382116200027e575b60209062000226601f8401601f19168301620001bb565b93838552828483010111620002745782906000905b838383106200025b575050116200025157505090565b6000918301015290565b819350828193920101518282880101520183916200023b565b5050505050600080fd5b62000288620001a4565b6200020f565b505050600080fd5b90600182811c92168015620002ca575b6020831014620002b257565b5050634e487b7160e01b600052602260045260246000fd5b91607f1691620002a6565b601f8111620002e2575050565b6000906003825260208220906020601f850160051c8301941062000323575b601f0160051c01915b8281106200031757505050565b8181556001016200030a565b909250829062000301565b601f81116200033b575050565b6000906004825260208220906020601f850160051c830194106200037c575b601f0160051c01915b8281106200037057505050565b81815560010162000363565b90925082906200035a565b80519091906001600160401b0381116200047b575b620003b481620003ae60045462000296565b6200032e565b602080601f8311600114620003f35750819293600092620003e7575b50508160011b916000199060031b1c191617600455565b015190503880620003d0565b6004600052601f198316949091907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000905b8782106200046257505083600195961062000448575b505050811b01600455565b015160001960f88460031b161c191690553880806200043d565b8060018596829496860151815501950193019062000427565b62000485620001a4565b6200039c56fe6040608081526004361015610015575b50600080fd5b600090813560e01c806306fdde0314610250578063095ea7b31461023357806318160ddd1461020d57806323b872dd146101f0578063313ce567146101d057806339509351146101b357806370a082311461017257806395d89b411461014b578063a457c2d71461012e578063a9059cbb146101005763dd62ed3e1461009b575061000f565b346100fc576100f891506100e86100d16100b436610361565b6001600160a01b0390911660009081526001602052604090209091565b9060018060a01b0316600052602052604060002090565b5490519081529081906020820190565b0390f35b5080fd5b50346100fc576100f8915061011d610117366102d1565b9061057f565b905190151581529081906020820190565b50346100fc576100f8915061011d610145366102d1565b9061069a565b50346100fc576100f8915061015f3661026c565b6101676104c2565b90519182918261027a565b50346100fc576100f891506101a46101893661033e565b6001600160a01b031660009081526020819052604090205490565b90519081529081906020820190565b50346100fc576100f8915061011d6101ca366102d1565b9061065d565b5090346101eb57506101e13661026c565b5160128152602090f35b809150fd5b50346100fc576100f8915061011d610207366102ff565b9161059a565b50346100fc576100f891506102213661026c565b60025490519081529081906020820190565b50346100fc576100f8915061011d61024a366102d1565b9061058f565b50346100fc576100f891506102643661026c565b6101676103ce565b600090600319011261000f57565b919091602080825283519081818401526000945b8286106102bb5750508060409394116102ae575b601f01601f1916010190565b60008382840101526102a2565b858101820151848701604001529481019461028e565b604090600319011261000f576004356001600160a01b0381168114156102f8579060243590565b5050600080fd5b606090600319011261000f576001600160a01b03906004358281168114156103365791602435908116811415610336579060443590565b505050600080fd5b602090600319011261000f576004356001600160a01b0381168114156102f85790565b604090600319011261000f576001600160a01b039060043582811681141561033657916024359081168114156103365790565b90601f8019910116810190811067ffffffffffffffff8211176103b657604052565b5050634e487b7160e01b600052604160045260246000fd5b60405190600060035490600182811c928181169182156104b8575b602091828610841461049c578588528794936020860193929181156104845750600114610422575b50505061042092500383610394565b565b92509361045160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90565b946000935b82851061046e57505050610420935001388080610411565b8654858501529586019588955093810193610456565b60ff1916845250610420955050019050388080610411565b5050634e487b7160e01b83525050602260045260249350915050fd5b93607f16936103e9565b60405190600060045490600182811c92818116918215610575575b602091828610841461049c5785885287949360208601939291811561048457506001146105135750505061042092500383610394565b92509361054260046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90565b946000935b82851061055f57505050610420935001388080610411565b8654858501529586019588955093810193610547565b93607f16936104dd565b9061058a91336107dd565b600190565b9061058a91336108f7565b90826105a691836107dd565b6001600160a01b0381166000908152600160209081526040808320338452909152902054918083106105df5761058a92039033906108f7565b50505050608460405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152fd5b81198111610644570190565b505050634e487b7160e01b600052601160045260246000fd5b61069361058a9233600052600160205261068d8360406000209060018060a01b0316600052602052604060002090565b54610638565b90336108f7565b3360009081526001602090815260408083206001600160a01b0385168452909152902054918083106106d25761058a920390336108f7565b50505050608460405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b1561072f57565b5060405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561078857565b5060405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b90916001600160a01b03808316156108a0577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9161082161089b9286161515610728565b6001600160a01b038416600090815260208190526040902081905461084882821015610781565b036108658560018060a01b03166000526000602052604060002090565b556001600160a01b0385166000908152602081905260409020610889828254610638565b90556040519081529081906020820190565b0390a3565b5050505050608460405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152fd5b90916001600160a01b03808316156109ba578316156109675761089b817f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592610956866100d18760018060a01b03166000526001602052604060002090565b556040519081529081906020820190565b50505050608460405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152fd5b5050505050608460405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152fdfea3646970667358221220959781db0747655f9804d53776b138294039ac076352983f4d0054058ae485316c6578706572696d656e74616cf564736f6c634300080b0041";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC20>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
